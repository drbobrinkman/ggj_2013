;------------------------------------------------
;
; untitled
; Atari VCS Game 
; Created by Bo Brinkman on 2011-09-20.
;
; Logo (c) 2011 __EyeWOL__. All rights reserved.
;
; Use with joystick controllers
;
;------------------------------------------------
	processor 	6502
	include 	vcs.h
	include 	macro.h

;------------------------------------------------
; Constants
;------------------------------------------------
BLACK = #$00
HMOVE_M07          =  $F0
HMOVE_M06          =  $E0
HMOVE_M05          =  $D0
HMOVE_M04          =  $C0
HMOVE_M03          =  $B0
HMOVE_M02          =  $A0
HMOVE_M01          =  $90
HMOVE_0            =  $80
HMOVE_M15          =  $70
HMOVE_M14          =  $60
HMOVE_M13          =  $50
HMOVE_M12          =  $40
HMOVE_M11          =  $30
HMOVE_M10          =  $20
HMOVE_M09          =  $10
HMOVE_M08          =  $00

; values for NUSIZx:
ONE_COPY          = %000
TWO_COPIES        = %001
TWO_WIDE_COPIES   = %010
THREE_COPIES      = %011 
DOUBLE_SIZE       = %101 
THREE_MED_COPIES  = %110 
QUAD_SIZE         = %111

; values for REFPx:
NO_REFLECT        = %0000
REFLECT           = %1000

; mask for SWCHB
P1_DIFF_MASK      = %10000000
BW_MASK           = %00001000       ; black and white bit
SELECT_MASK       = %00000010
RESET_MASK        = %00000001

;Joystick masks
P0_RIGHT_MASK 	= %10000000
P0_LEFT_MASK 	= %01000000
P0_DOWN_MASK 	= %00100000
P0_UP_MASK 		= %00010000

NOTE_C2 = 26 ;12
NOTE_BF2 = 14
NOTE_A2	= 15
NOTE_G	= 17
NOTE_F	= 19
NOTE_E	= 20
NOTE_D	= 23
NOTE_C	= 26
NOTE_A	= 31

NOTE_ATTACK = 32

TICKS_PER_COUNT = 24

;------------------------------------------------
; RAM
;------------------------------------------------
    SEG.U   variables
    ORG     $80

ticks .byte
bgDk  .byte
bgLt  .byte
pfLt  .byte

autoX .byte
autoY .byte

joyX  .byte
joyY  .byte

plrX  .byte
plrY  .byte

musicTicks .byte
musicCount .byte

envelope		  .byte

bgIndex .byte

;------------------------------------------------
; Start of ROM
;------------------------------------------------
	SEG   Bank0
	ORG   $F000       	; 4k ROM start point

Start 
	CLEAN_START			; Clear RAM and Registers
	
	lda		#0
	sta		ticks	;initialize ticks	
	
	;Initialize colors	
	lda 	#$44
	sta		bgDk
	lda		#$46
	sta		bgLt
	lda		#$4e
	sta		pfLt
	
	lda		#$6C
	sta		COLUP0
	
	;Initialize player to center of the screen
	lda		#18
	sta		joyX
	lda		#18
	sta		joyY
	
	lda		#$FF
	sta		GRP0
	
	lda		#3
	sta		AUDV0
	lda		#27
	sta		AUDF0
	lda		#8
	sta		AUDC0
	
	lda     #12
	sta		AUDV1
	lda		#12
	sta		AUDC1
	
	lda 	#00
	sta		musicTicks
	sta 	musicCount
	sta		envelope

	
;------------------------------------------------
; Vertical Blank
;------------------------------------------------
MainLoop
	lda		#0		;Start the vertical blank
	sta		VBLANK
	VERTICAL_SYNC
    lda     #43
    sta     TIM64T ;This sets a timer that we can check via INTIM

	;***** Vertical Blank code goes here
	
	;** Increment ticks
	lda		ticks
	clc
	adc		#4
	cmp		#96
	bne		.noTickReset
	lda		#0
.noTickReset
	clc
	sta 	ticks
	sta		bgIndex
	
	;Want the heartbeat sound to go up and down in 
	; volume, to make the "beat" effect
	lda		ticks
	lsr
	lsr
	lsr
	cmp		#8
	bmi		.goingUp
	eor     #%00001111
.goingUp
	adc		#1
	sta		AUDV0
	
;*** Read the joystick
	lda 	#P0_LEFT_MASK
	bit		SWCHA
	bne		.notRight
	
	lda		joyX
	cmp		#36	
	beq		.notRight
	adc		#1
	sta		joyX
	
.notRight
	lda		#P0_RIGHT_MASK
	bit		SWCHA
	bne		.notLeft
	
	lda		joyX
	cmp		#0
	beq		.notLeft
	sbc		#1
	sta		joyX
.notLeft
	
	
	lda 	#P0_DOWN_MASK
	bit		SWCHA
	bne		.notUp

	lda		joyY
	cmp		#36	
	beq		.notUp
	adc		#1
	sta		joyY

.notUp
	lda		#P0_UP_MASK
	bit		SWCHA
	bne		.notDown

	lda		joyY
	cmp		#0
	beq		.notDown
	sbc		#1
	sta		joyY
.notDown
	
	
	ldy		joyX
	lda		.x_sin_table,y
	sta		plrX
	
	ldy		joyY
	lda		.y_cos_table,y
	sta		plrY
	
	
	;** Place the player sprite
	sta 	WSYNC
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	lda		plrX
.pos_loop_plr
	sbc		#15				;(2)
	bpl		.pos_loop_plr	;(3)
	
	sta		RESP0			;(3)

	sta		WSYNC	
	eor		#255			;(2)
	tax	
	lda		.hmove_table,x	;(4)
	sta		HMP0			;(3)
	
	sta		WSYNC
	sta		HMOVE

	;Clear the player1 sprite
	lda		#0
	sta		GRP0
	
	
	
	lda		musicTicks
	adc		#1
	sta		musicTicks
	cmp		TICKS_PER_COUNT
	bne		.notCountTime
	lda 	#0
	sta		musicTicks
	inc		musicCount
	
	lda		musicCount
	cmp		#96
	bne		.notCountTime
	lda		#0
	sta		musicCount
	
.notCountTime
	
	ldx		musicCount
	lda		.song,x
	sta		AUDF1
	
	;Is this the start of a new note?
	and		NOTE_ATTACK
	beq		.notAttack
	lda		#15	;Starting volume level
	sta		envelope
.notAttack
	
	lda envelope
	sta	AUDV1
	
	lda envelope
	cmp #9
	beq	.envelopeDone
	dec envelope
.envelopeDone
	
.waitForVBlank
	lda		INTIM
	bne		.waitForVBlank
	sta		WSYNC


;------------------------------------------------
; Kernel
;------------------------------------------------	
DrawScreen
	
;--Burn the top whitespace	
	;Pixel aspect ratio is 12:7
	
	;---Top zone, no player/target
	ldx		#28+1		; Kernel goes here. 	
.scanline	
	ldy		bgIndex
	lda		.bgcolors,y
	sta		COLUBK
	
	txa
	adc		#28+45+46+45
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player
	lda		#$00
	sta		GRP0
	jmp		.donePlayer
.player
	lda		#$FF
	sta		GRP0
.donePlayer

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset
	lda		#0	
.noBgReset
	sta		bgIndex
	
	dex
	sta		WSYNC
	bne		.scanline 		
;--end top

;--begin first target range
	ldx		#45		; Kernel goes here. 	
.scanline2
	ldy		bgIndex
	lda		.bgcolors,y
	sta		COLUBK

	txa
	adc		#28+46+45
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player2

	lda		#$00
	sta		GRP0
	jmp		.donePlayer2

.player2
	lda		#$FF
	sta		GRP0
.donePlayer2

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset2
	lda		#0	
.noBgReset2
	sta		bgIndex

	dex
	sta		WSYNC
	bne		.scanline2
;--end first target

;--begin 2nd target		
	ldx		#46		; Kernel goes here. 	
.scanline3
	ldy		bgIndex
	lda		.bgcolors,y
	sta		COLUBK

	txa
	adc		#28+45
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player3

	lda		#$00
	sta		GRP0
	jmp		.donePlayer3

.player3
	lda		#$FF
	sta		GRP0
.donePlayer3

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset3
	lda		#0	
.noBgReset3
	sta		bgIndex
	
	dex
	sta		WSYNC
	bne		.scanline3
;--End 2nd target			
			

;--Start 3rd target			
	ldx		#45		; Kernel goes here. 	
.scanline4
	ldy		bgIndex
	lda		.bgcolors,y
	sta		COLUBK
	
	txa
	adc		#28
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player4

	lda		#$00
	sta		GRP0
	jmp		.donePlayer4

.player4
	lda		#$FF
	sta		GRP0
.donePlayer4

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset4
	lda		#0	
.noBgReset4
	sta		bgIndex

	dex
	sta		WSYNC
	bne		.scanline4					
;--end 3rd target

;--Start bottom zone	
	ldx		#28		; Kernel goes here. 	
.scanline5
	ldy		bgIndex
	lda		.bgcolors,y
	sta		COLUBK

	txa
	adc		#0
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player5

	lda		#$00
	sta		GRP0
	jmp		.donePlayer5

.player5
	lda		#$FF
	sta		GRP0
.donePlayer5

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset5
	lda		#0	
.noBgReset5
	sta		bgIndex

	dex
	sta		WSYNC
	bne		.scanline5				
;--end bottom zone			
		
;------------------------------------------------
; Overscan
;------------------------------------------------
	lda		#%01000010
	sta		VBLANK
    lda		#36
    sta		TIM64T

	;***** Overscan Code goes here
	lda #$00
	sta COLUBK
	sta COLUPF
	
.waitForOverscan
	lda     INTIM
	bne     .waitForOverscan

	jmp		MainLoop

;------------------------------------------------
; ROM Tables
;------------------------------------------------
	;***** ROM tables go here
	
	ORG $FC00
.hmove_table
	.byte HMOVE_0 
	.byte HMOVE_M01         
	.byte HMOVE_M02        
	.byte HMOVE_M03       
	.byte HMOVE_M04         
	.byte HMOVE_M05          
	.byte HMOVE_M06          
	.byte HMOVE_M07         
	.byte HMOVE_M08       
	.byte HMOVE_M09         
	.byte HMOVE_M10          
	.byte HMOVE_M11          
	.byte HMOVE_M12          
	.byte HMOVE_M13          
	.byte HMOVE_M14          
	.byte HMOVE_M15
	
.x_sin_table
	.byte	#112
	.byte	#112
	.byte	#111
	.byte	#111
	.byte	#110
	.byte	#109
	.byte	#107
	.byte	#105
	.byte	#104
	.byte	#101
	.byte	#99
	.byte	#97
	.byte	#94
	.byte	#91
	.byte	#88
	.byte	#85
	.byte	#82
	.byte	#79
	.byte	#76
	.byte	#73
	.byte	#70
	.byte	#67
	.byte	#64
	.byte	#61
	.byte	#58
	.byte	#55
	.byte	#53
	.byte	#51
	.byte	#48
	.byte	#47
	.byte	#45
	.byte	#43
	.byte	#42
	.byte	#41
	.byte	#41
	.byte	#40
	.byte	#40
	
.y_cos_table
	.byte	#164
	.byte	#164
	.byte	#163
	.byte	#162
	.byte	#160
	.byte	#158
	.byte	#155
	.byte	#152
	.byte	#149
	.byte	#145
	.byte	#141
	.byte	#137
	.byte	#132
	.byte	#127
	.byte	#122
	.byte	#117
	.byte	#111
	.byte	#106
	.byte	#100
	.byte	#94
	.byte	#89
	.byte	#83
	.byte	#78
	.byte	#73
	.byte	#68
	.byte	#63
	.byte	#59
	.byte	#55
	.byte	#51
	.byte	#48
	.byte	#45
	.byte	#42
	.byte	#40
	.byte	#38
	.byte	#37
	.byte	#36
	.byte	#36
	
	ORG $FD00
.song
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2
	.byte NOTE_A2
	
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_G
	.byte NOTE_G
	
	.byte NOTE_C2 | NOTE_ATTACK
	.byte NOTE_C2
	.byte NOTE_C2
	.byte NOTE_BF2 | NOTE_ATTACK
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_E | NOTE_ATTACK
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2
	.byte NOTE_A2
	
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_G
	.byte NOTE_G
	
	.byte NOTE_C2 | NOTE_ATTACK
	.byte NOTE_C2
	.byte NOTE_C2
	.byte NOTE_BF2 | NOTE_ATTACK
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_E | NOTE_ATTACK
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	
	.byte NOTE_A | NOTE_ATTACK
	.byte NOTE_A
	.byte NOTE_C | NOTE_ATTACK
	.byte NOTE_C
	.byte NOTE_C | NOTE_ATTACK
	.byte NOTE_C
	.byte NOTE_C
	.byte NOTE_C
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_F
	.byte NOTE_F
	
	.byte NOTE_C2 | NOTE_ATTACK
	.byte NOTE_C2
	.byte NOTE_C2
	.byte NOTE_BF2 | NOTE_ATTACK
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_E | NOTE_ATTACK
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	;--Song end
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E

	ORG $FE00
.bgcolors
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
		
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
		
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
		
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
;------------------------------------------------
; Interrupt Vectors
;------------------------------------------------
	echo [*-$F000]d, " ROM bytes used"
	ORG    $FFFA
	.word  Start         ; NMI
	.word  Start         ; RESET
	.word  Start         ; IRQ
    
	END