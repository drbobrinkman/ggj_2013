;------------------------------------------------
;
; untitled
; Atari VCS Game 
; Created by Bo Brinkman on 2011-09-20.
;
; Logo (c) 2011 __EyeWOL__. All rights reserved.
;
; Use with joystick controllers
;
;------------------------------------------------
	processor 	6502
	include 	vcs.h
	include 	macro.h

;------------------------------------------------
; Constants
;------------------------------------------------
BLACK = #$00
HMOVE_L7          =  $70
HMOVE_L6          =  $60
HMOVE_L5          =  $50
HMOVE_L4          =  $40
HMOVE_L3          =  $30
HMOVE_L2          =  $20
HMOVE_L1          =  $10
HMOVE_0           =  $00
HMOVE_R1          =  $F0
HMOVE_R2          =  $E0
HMOVE_R3          =  $D0
HMOVE_R4          =  $C0
HMOVE_R5          =  $B0
HMOVE_R6          =  $A0
HMOVE_R7          =  $90
HMOVE_R8          =  $80

LOGO_COLOR     = $40
BG_COLOR 	   = $42

; values for NUSIZx:
ONE_COPY          = %000
TWO_COPIES        = %001
TWO_WIDE_COPIES   = %010
THREE_COPIES      = %011 
DOUBLE_SIZE       = %101 
THREE_MED_COPIES  = %110 
QUAD_SIZE         = %111

; values for REFPx:
NO_REFLECT        = %0000
REFLECT           = %1000

; mask for SWCHB
P1_DIFF_MASK      = %10000000
BW_MASK           = %00001000       ; black and white bit
SELECT_MASK       = %00000010
RESET_MASK        = %00000001

;Height of the image to display
H_LOGO    = 55

;How often to advance the note counter
TICKS_PER_NOTE = 10


NOTE_E = 23
;NOTE_F = 20
NOTE_G = 19
NOTE_GS = 18
NOTE_A = 17
NOTE_B = 15
NOTE_C = 14
NOTE_D = 12
NOTE_E2 = 11
NOTE_D2 = 26

;These notes signal the start of a note
NOTEA_E = 23+32
;NOTEA_F = 20+32
NOTEA_G = 19+32
NOTEA_GS = 18+32
NOTEA_A = 17+32
NOTEA_B = 15+32
NOTEA_C = 14+32
NOTEA_D = 12+32
NOTEA_E2 = 11+32
NOTEA_D2 = 26+32

;------------------------------------------------
; RAM
;------------------------------------------------
    SEG.U   variables
    ORG     $80

ticks .byte
bgDk  .byte
bgLt  .byte
pfLt  .byte

plrX  .byte
plrY  .byte

;------------------------------------------------
; Start of ROM
;------------------------------------------------
	SEG   Bank0
	ORG   $F000       	; 4k ROM start point

Start 
	CLEAN_START			; Clear RAM and Registers
	
	lda		#0
	sta		ticks	;initialize ticks	
	
	;Initialize colors	
	lda 	#$44
	sta		bgDk
	lda		#$46
	sta		bgLt
	lda		#$4e
	sta		pfLt
	
	lda		#$6C
	sta		COLUP0
	
	;Initialize player to center of the screen
	lda		#80
	sta		plrX
	lda		#96
	sta		plrY
	
	lda		#$FF
	sta		GRP0
	
;------------------------------------------------
; Vertical Blank
;------------------------------------------------
MainLoop
	lda		#0		;Start the vertical blank
	sta		VBLANK
	VERTICAL_SYNC
    lda     #43
    sta     TIM64T ;This sets a timer that we can check via INTIM

	;***** Vertical Blank code goes here
	
	;** Increment ticks
	lda		ticks
	clc
	adc		#4
	cmp		#128
	bne		.noTickReset
	lda		#0
.noTickReset
	sta 	ticks
	
	;** Place the player sprite
	sta 	WSYNC
	lda		plrX
	sbc		#15
.pos_loop_plr
	sbc		#15				;(2)
	bpl		.pos_loop_plr	;(3)
	sta		RESP1			;(3)
		
.waitForVBlank
	lda		INTIM
	bne		.waitForVBlank
	sta		WSYNC


;------------------------------------------------
; Kernel
;------------------------------------------------	
DrawScreen
	
;--Burn the top whitespace	
	;Image is 55 tall, 32 wide. Center it vertically... Pixel aspect ration is 12:7
	ldx		#192+1		; Kernel goes here. Last 8 scanlines are for logo and status	
.scanline
	txa
	sbc		ticks
	and		#64		;Check the 2nd most significant bit

	beq		.colorLight
	;**dark
	lda		bgDk
	jmp		.colorSet
.colorLight
	lda		bgLt
.colorSet	
	sta		COLUBK
	
	dex
	sta		WSYNC
	bne		.scanline 		
		
		
;------------------------------------------------
; Overscan
;------------------------------------------------
	lda		#%01000010
	sta		VBLANK
    lda		#36
    sta		TIM64T

	;***** Overscan Code goes here
	lda #$00
	sta COLUBK
	sta COLUPF
	
.waitForOverscan
	lda     INTIM
	bne     .waitForOverscan

	jmp		MainLoop

;------------------------------------------------
; ROM Tables
;------------------------------------------------
	;***** ROM tables go here
	
	ORG $FC00

	
;------------------------------------------------
; Interrupt Vectors
;------------------------------------------------
	echo [*-$F000]d, " ROM bytes used"
	ORG    $FFFA
	.word  Start         ; NMI
	.word  Start         ; RESET
	.word  Start         ; IRQ
    
	END