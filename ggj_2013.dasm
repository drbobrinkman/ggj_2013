;------------------------------------------------
;
; untitled
; Atari VCS Game 
; Created by Bo Brinkman on 2011-09-20.
;
; Logo (c) 2011 __EyeWOL__. All rights reserved.
;
; Use with joystick controllers
;
;------------------------------------------------
	processor 	6502
	include 	vcs.h
	include 	macro.h

;------------------------------------------------
; Constants
;------------------------------------------------
BLACK = #$00
HMOVE_M07          =  $F0
HMOVE_M06          =  $E0
HMOVE_M05          =  $D0
HMOVE_M04          =  $C0
HMOVE_M03          =  $B0
HMOVE_M02          =  $A0
HMOVE_M01          =  $90
HMOVE_0            =  $80
HMOVE_M15          =  $70
HMOVE_M14          =  $60
HMOVE_M13          =  $50
HMOVE_M12          =  $40
HMOVE_M11          =  $30
HMOVE_M10          =  $20
HMOVE_M09          =  $10
HMOVE_M08          =  $00

HMOVE_L7          =  $70
HMOVE_L6          =  $60
HMOVE_L5          =  $50
HMOVE_L4          =  $40
HMOVE_L3          =  $30
HMOVE_L2          =  $20
HMOVE_L1          =  $10
;HMOVE_0           =  $00
HMOVE_R1          =  $F0
HMOVE_R2          =  $E0
HMOVE_R3          =  $D0
HMOVE_R4          =  $C0
HMOVE_R5          =  $B0
HMOVE_R6          =  $A0
HMOVE_R7          =  $90
HMOVE_R8          =  $80

; values for NUSIZx:
ONE_COPY          = %000
TWO_COPIES        = %001
TWO_WIDE_COPIES   = %010
THREE_COPIES      = %011 
DOUBLE_SIZE       = %101 
THREE_MED_COPIES  = %110 
QUAD_SIZE         = %111

; values for REFPx:
NO_REFLECT        = %0000
REFLECT           = %1000

; mask for SWCHB
P1_DIFF_MASK      = %10000000
BW_MASK           = %00001000       ; black and white bit
SELECT_MASK       = %00000010
RESET_MASK        = %00000001

;Joystick masks
P0_RIGHT_MASK 	= %10000000
P0_LEFT_MASK 	= %01000000
P0_DOWN_MASK 	= %00100000
P0_UP_MASK 		= %00010000

NOTE_C2 = 26 ;12
NOTE_BF2 = 14
NOTE_A2	= 15
NOTE_G	= 17
NOTE_F	= 19
NOTE_E	= 20
NOTE_D	= 23
NOTE_C	= 26
NOTE_A	= 31

NOTE_ATTACK = 32

TICKS_PER_COUNT = 24

SCORE_TO_SEE_BABY = $05
SCORE_FOR_BG = 64
SCORE_FOR_SONG = 96

PLAYER_COLOR = $8c
BABY_COLOR = $6c
SCORE_FG   = $4c
SCORE_BG   = $00

H_EDGE = 132
V_EDGE = 162

;TODO: If you change this, the logo screen rolls. WTF??!
LOGO_COLOR     = $44
;Height of the image to display
H_LOGO    = 55
;------------------------------------------------
; RAM
;------------------------------------------------
    SEG.U   variables
    ORG     $80

ticks .byte

plrX  .byte
plrY  .byte

musicTicks .byte
musicCount .byte

envelope		  .byte
songVol	.byte

bgIndex .byte

tgtX	.byte
tgtY	.byte

tgtTargetX .byte
tgtTargetY .byte

score   .byte

maxHBVolume .byte
temp	.byte

bgMask .byte

totalDist .byte
babySpeed .byte
aiDir	  .byte

;--This is the real "Score"
timeSpentWithBabySec .byte
timeSpentWithBabyMin .byte
timerTicks			.byte

scorePF1	.byte
scorePF2	.byte
scoreColor  .byte
madeMusic   .byte

;useless variable(?), but no time to remove it
looper .byte

black .byte
tmpx  .byte
babyColor .byte

;---For use with indirect addressing in the scoreboard
temp1LSB .byte
temp1MSB .byte
temp2LSB .byte
temp2MSB .byte
temp3LSB .byte
temp3MSB .byte
temp4LSB .byte
temp4MSB .byte
temp5LSB .byte
temp5MSB .byte
temp6LSB .byte
temp6MSB .byte

;------------------------------------------------
; Start of ROM
;------------------------------------------------
	SEG   Bank0
	ORG   $F000       	; 4k ROM start point
Start
	CLEAN_START ; Clear RAM and Registers
	
	;Music initialization
	
	
	;Set the playfield color and registers
	lda #1
	sta CTRLPF
	lda #0
	sta COLUPF
	lda #LOGO_COLOR
	sta COLUBK
	
	;Set the HMP0 and HMP1 registers
	lda #HMOVE_R7		     ; Again, since HMOVE is on clock 73, R8 actually gives left 1
	sta HMP0 ; move player 0 left 0 pixels
	lda #HMOVE_R6 | TWO_COPIES ; 2         logo is 32 wide, so need 4 sprites
	sta NUSIZ0                 ; 3 = 
	sta NUSIZ1                 ; 3 =
	sta HMP1                  ; 3 =   move player 1 left 2 pixel .. note that we
	 							 ; use HMOVE_R7 because we are executing the HMOVE BEFORE
							     ; the WSYNC, to eliminate bars
	
	lda #28
	sta looper
	
	;Clear motion registers and player reflection registers
	lda #0
	;sta HMCLR                  ; 3 = @18   clear horizontal movements
	sta REFP0                  ; 3 = @21
	sta REFP1                  ; 3 = @24
	

	
;------------------------------------------------
; Vertical Blank
;------------------------------------------------
AttractMainLoop
	lda		#0		;Start the vertical blank
	sta		VBLANK
	lda 	#2
	sta		VSYNC

	sta		WSYNC
	sta		WSYNC
	sta		WSYNC

	lda		#0
	sta		VSYNC

	;***** Vertical Blank code goes here
	;--Handle reset switch
	lda		SWCHB
	and		#%00000001
	bne		.noRealStartAttract
    jmp		RealStart
.noRealStartAttract

	;update color for text, causes throb/flicker of text color
	lda #$0F
	sta COLUP1
	sta COLUP0
	
	ldy looper
	dey
	dey
	bmi .fixit
	bne .stoloo5
.fixit
	ldy #28
.stoloo5
	sty looper
	
	;Get PF setup for the first scanline (Waste time)
	lda	#0
	nop
	sta PF0        ;3
	sta PF1        ;3
	sta PF2	       ;3 =
	nop
	nop
	nop
	nop

	dey
	bne .stoloo2
	ldy #28
.stoloo2
	sty looper

	nop
	nop
	nop

	ldx  #35
.attractWaitForVBlank
	sta		WSYNC
	dex
	bne		.attractWaitForVBlank
	;sta		WSYNC
	jmp		AttractKernel

;------------------------------------------------
; Kernel
;------------------------------------------------	
	ORG $F100
AttractKernel
	sta	WSYNC

	lda #LOGO_COLOR	;2
	sta COLUBK  	;3
	lda #0	;2
	sta COLUPF		;3

	nop
	nop
	nop
	nop
	nop ;@20

	nop
	nop
	nop
	nop
	nop

	nop
   nop
   nop
   nop
   nop


   sta RESP0                  ; 3 = @43  player 0 @ pixel 114
   sta RESP1                  ; 3 = @46   player 1 @ pixel 122
   

   nop
   nop
   nop
   nop
   nop

	nop
   nop
   nop
   nop
   nop

	nop
	nop

   sta HMOVE ; Should be on clock 73


	;--Burn the top whitespace	
	;Image is 55 tall, 32 wide. Center it vertically... Pixel aspect ration is 12:7
	ldx		#68		; Kernel goes here. Last 8 scanlines are for logo and status	
.attractscanline
	ldy looper
	lda	#0
	nop
	sta PF0        ;3
	sta PF1        ;3
	sta PF2	       ;3 =
	nop
	nop
	nop
	nop

	dey
	bne .stoloo1
	ldy #28
.stoloo1
	sty looper

	dex
	sta		WSYNC
	bne		.attractscanline 


	ldy looper
	;--Draw the main sprite image
	ldx	#H_LOGO-1
.logoLoop ;loop will run 55 times
   sta WSYNC
	;--------------------------------------

	lda	#0
	nop
	sta PF0        ;3
	sta PF1        ;3
	sta PF2	       ;3 =
	nop
	nop
	nop
	nop
	
   nop             

   lda Logo0,x           ; 4
   sta GRP0                   ; 3 = @10
   
   lda Logo1,x           ; 4
   sta GRP1                   ; 3 = @17
   

   ldy Logo3,x           ; 4
   lda Logo2,x			  ; 4
			 
   sta GRP0                   ; 3 = @41  must complete between pixel 123 and 127	   
   sty GRP1                   ; 3 = @43  must complete between pixel 128 and 135

   nop
   nop
   nop
   nop
   nop
	ldy looper     ;3
	
   sta GRP0                  ; 3    -- TODO This is jsut to waste 3 cycles
   dex
   bpl .logoLoop    ; 2Â³



	;--Burn the bottom whitespace	
	lda #0
	sta GRP0
	sta GRP1
	;Image is 55 tall, 32 wide. Center it vertically... Pixel aspect ration is 12:7
	ldx		#67+1		; Kernel goes here. Last 8 scanlines are for logo and status	
.attractscanline2
	ldy looper
	lda	#0
	nop
	sta PF0        ;3
	sta PF1        ;3
	sta PF2	       ;3 =
	nop
	nop
	nop
	nop

	dey
	bne .stoloo3
	ldy #28
.stoloo3
	sty looper

	dex
	sta		WSYNC
	bne		.attractscanline2 ;2 if not taken.				
;--end bottom zone			

;------------------------------------------------
; Overscan
;------------------------------------------------
	lda		#%01000010
	sta		VBLANK
    lda		#36
    sta		TIM64T

	;***** Overscan Code goes here

.attractWaitForOverscan
	lda     INTIM
	bne     .attractWaitForOverscan
	jmp		AttractMainLoop
	
	
	
	
	
	
	
	
	
	
RealStart 
	CLEAN_START			; Clear RAM and Registers
	
	lda		#0
	sta		ticks	;initialize ticks	
	
	;Initialize colors		
	lda		#PLAYER_COLOR ;Player color
	sta		COLUP0
	sta		scoreColor ;--Use player color for score color too
	
	;Initialize player to center of the screen
	lda		#76
	sta		tgtX
	lda		#92
	sta		tgtY
	lda		#0

	sta		COLUP1
	sta		bgMask
	sta		songVol
	
	lda     #76
	sta		plrX
	lda		#92
	sta		plrY
	
	lda		#$FF
	sta		GRP0
	
	lda		#3
	sta		AUDV0
	lda		#27
	sta		AUDF0
	lda		#8
	sta		AUDC0
	
	lda     #0
	sta		AUDV1
	lda		#12
	sta		AUDC1
	
	lda 	#00
	sta		musicTicks
	sta 	musicCount
	sta		envelope
	sta		aiDir
	sta		timeSpentWithBabySec
	sta		timeSpentWithBabyMin
	sta		timerTicks
	sta		scorePF1
	sta		scorePF2
	sta		madeMusic
	sta		black
	
	lda		#2
	sta		maxHBVolume

	lda		#0
	sta		score
	lda		#1
	sta		babySpeed
	sta		CTRLPF ;--Want playfield reflection
	
	lda	#$FC		;---This needs to be changed if ROM layout is changed
	sta	temp1MSB
	sta	temp2MSB
	sta	temp3MSB
	sta	temp4MSB
	sta	temp5MSB
	sta	temp6MSB
	
;------------------------------------------------
; Vertical Blank
;------------------------------------------------
MainLoop
	lda		#0		;Start the vertical blank
	sta		VBLANK
	VERTICAL_SYNC
    lda     #43
    sta     TIM64T ;This sets a timer that we can check via INTIM

	;***** Vertical Blank code goes here
	
	;--Handle reset switch
	lda		SWCHB
	and		#%00000001
	bne		.notRealStart
	jmp		RealStart
.notRealStart	

	;** Increment ticks
	lda		timerTicks
	clc
	adc		#1
	cmp		#60
	bne		.noTimerTickReset
	lda		#0
.noTimerTickReset
	clc
	sta		timerTicks
	
	lda		ticks
	clc
	adc		#4
	cmp		#96
	bne		.noTickReset
	lda		#0
.noTickReset
	clc
	sta 	ticks
	sta		bgIndex
	
	;Want the heartbeat sound to go up and down in 
	; volume, to make the "beat" effect
	lda		ticks
	lsr
	lsr
	lsr
	cmp		#8
	bmi		.goingUp
	eor     #%00001111
.goingUp
	adc		#1
	;and     maxHBVolume
	asl
.decreaseVol
	lsr
	cmp		maxHBVolume
	bpl		.decreaseVol
	
	sta		AUDV0
	
;*** Read the joystick
	lda 	#P0_RIGHT_MASK
	bit		SWCHA
	bne		.notRight
	
	lda		plrX
	cmp		#132	
	beq		.notRight
	adc		#1
	sta		plrX
	
.notRight
	lda		#P0_LEFT_MASK
	bit		SWCHA
	bne		.notLeft
	
	lda		plrX
	cmp		#20
	beq		.notLeft
	sbc		#1
	sta		plrX
.notLeft
	
	
	lda 	#P0_UP_MASK
	bit		SWCHA
	bne		.notUp

	lda		plrY
	cmp		#162
	beq		.notUp
	adc		#2
	sta		plrY

.notUp
	lda		#P0_DOWN_MASK
	bit		SWCHA
	bne		.notDown

	lda		plrY
	cmp		#38
	beq		.notDown
	sbc		#2
	sta		plrY
.notDown
	;jmp		$F100
	
	;ORG $F100	
	;** Place the player sprite
	
	
	
	
	
	clc
	lda		musicTicks
	adc		#1
	sta		musicTicks
	cmp		TICKS_PER_COUNT
	bne		.notCountTime
	lda 	#0
	sta		musicTicks
	inc		musicCount

	lda		musicCount
	cmp		#96
	bne		.notCountTime
	lda		#0
	sta		musicCount
	
.notCountTime
		
	lda		musicTicks
	bne		.notAttack ;--Cannot be an attack if it isn't a new count
	
	ldx		musicCount
	lda		.song,x
	sta		AUDF1
	;Is this the start of a new note?
	and		NOTE_ATTACK
	beq		.notAttack
	lda		songVol	;Starting volume level
	sta		envelope
	
	
.notAttack
	
	lda envelope
	sta	AUDV1
	
	lda envelope
	cmp #9
	bmi	.envelopeDone
	dec envelope
.envelopeDone
	
	;--Clear collisions 
	sta		CXCLR
	
	;--Set the HB volume based on distance
	lda		#16
	sta		maxHBVolume
	
	lda		plrX
	sbc		tgtX
	bpl		.isPositiveX
	eor		#$FF
.isPositiveX
	sta		temp
	lda		plrY
	sbc		tgtY
	bpl		.isPositiveY
	eor		#$FF
.isPositiveY
	adc		temp
	sta		totalDist
.adjustVolume
	dec 	maxHBVolume
	dec		maxHBVolume
	lsr
	bne	 	.adjustVolume
	lda		maxHBVolume ;;Never let volume get below 1
	ora		#1
	sta		maxHBVolume
	
	;--Points are scored when maxHBVolume is 0E or 0F. Lose points when < 06
	cmp		#$04 ;;TODO change back to 5 when done testing
	bmi		.loseScore
	cmp		#$07 ;;TODO change back to 8 when done testing
	bmi		.doneScore
	inc		score
	jmp		.doneScore
.loseScore
	dec score
	bpl .doneScore
	inc score ;--Correct if the score went negative
.doneScore
	lda	score
	cmp	#127 ;--127 is the max score, 0 is the min
	bne	.scoreNotTooBig
	dec score
.scoreNotTooBig
	cmp	#255
	bne	.scoreNotTooSmall
	inc score
.scoreNotTooSmall
	
	;--If score is high enough, make the "baby" visible
	lda		score
	cmp		#SCORE_TO_SEE_BABY
	bpl		.visibleBaby
	lda		#$00
	sta		babyColor
	jmp 	.doneBaby
.visibleBaby
	lda		#BABY_COLOR
	sta		babyColor
.doneBaby

	;---Which AI version we used is based on what stage
	lda		score
	cmp		#SCORE_TO_SEE_BABY
	bpl		.visibleBabyEvasionCode

	;----AI EVASION CODE

	;--AI CODE for invisible baby stage
	;--When the baby is invisible, stay put!
	jmp		.endAICode

		
;	lda		plrX
;	sbc		tgtX
	;--If this is a small positive number,
	;  we are to the left of the player, and we need to run.
	;  If it is a small positive number, we are to the left, and need to run
;	bpl		.dontRunRight
;	lda 	tgtX
;	adc		babySpeed
;	sta		tgtX
;	jmp		.horizRunDone
;.dontRunRight
;	lda		tgtX
;	sbc		babySpeed
;	sta		tgtX
;.horizRunDone
	;20 to 132
;	lda		tgtX
;	cmp		#132
;	bmi		.tgtXNotTooBig
;	lda		#132
;.tgtXNotTooBig
;	cmp		#20
;	bpl		.tgtXNotTooSmall
;	lda		#20
;.tgtXNotTooSmall
;	sta		tgtX
	
	
;	lda		plrY
;	sbc		tgtY
	;--If this is a positive number,
	;  we are to the below of the player, and we need to run.
	;  otherwise we are to the up, and need to run
;	bpl		.dontRunDown
;.doRunDown
;	lda 	tgtY
;	adc		babySpeed
;	adc		babySpeed
;	sta		tgtY
;	jmp		.vertRunDone
;.dontRunDown
;	lda		tgtY
;	sbc		babySpeed
;	sbc		babySpeed
;	sta		tgtY
;.vertRunDone
	;20 to 132
;	lda		tgtY
;	cmp		#162
;	bmi		.tgtYNotTooBig
;	lda		#162
;.tgtYNotTooBig
;	cmp		#38
;	bpl		.tgtYNotTooSmall
;	lda		#38
;.tgtYNotTooSmall
;	sta		tgtY

.visibleBabyEvasionCode	
	;--GOAL: Reach the point diametrically opposite from the player
	lda		plrX
	cmp		#76
	bpl		.playerIsRight
	lda		#132
	sta		tgtTargetX
	jmp		.playerIsLeft
.playerIsRight
	lda		#20
	sta		tgtTargetX
.playerIsLeft
	
	lda		plrY
	cmp		#100
	bpl		.playerIsUp
	lda		#162
	sta		tgtTargetY
	jmp		.playerIsDown
.playerIsUp
	lda		#38
	sta		tgtTargetY
.playerIsDown


	lda		plrY
	lsr
	eor		plrX
	and		#%00000001
	beq		.doY
	
	lda		tgtTargetX
	sbc		tgtX
	bpl		.runRight
	lda 	tgtX
	sbc		babySpeed
	sta		tgtX
	jmp		.horizRunDone
.runRight
	lda		tgtX
	adc		babySpeed
	sta		tgtX
.horizRunDone
	;20 to 132
	lda		tgtX
	cmp		#132
	bmi		.tgtXNotTooBig
	lda		#132
.tgtXNotTooBig
	cmp		#20
	bpl		.tgtXNotTooSmall
	lda		#20
.tgtXNotTooSmall
	sta		tgtX
	jmp		.noDoY
	
.doY	
	lda		tgtTargetY
	sbc		tgtY
	bpl		.doRunDown
	lda 	tgtY
	sbc		babySpeed
	sbc		babySpeed
	sta		tgtY
	jmp		.vertRunDone
.doRunDown
	lda		tgtY
	adc		babySpeed
	adc		babySpeed
	sta		tgtY
.vertRunDone
	;20 to 132
	lda		tgtY
	cmp		#162
	bmi		.tgtYNotTooBig
	lda		#162
.tgtYNotTooBig
	cmp		#38
	bpl		.tgtYNotTooSmall
	lda		#38
.tgtYNotTooSmall
	sta		tgtY
.noDoY
	jmp		.endAICode
	
.endAICode
;---END AI CODE	
	
	
	
	
	lda		score
	cmp		#SCORE_FOR_BG
	bpl		.yesBG
	lda		#0
	sta		bgMask
	lda		#1
	sta		babySpeed
	jmp		.doneBGMask
.yesBG
	lda		#$FF
	sta		bgMask
	lda		#1 ;--For now, stick with slow baby
	sta		babySpeed
	;Add to the "time with Baby",
	; but only do it once per second
	lda		timerTicks
	bne		.doneBGMask
	lda		timeSpentWithBabySec
	adc		#1
	cmp		#60
	bne		.notBabyMinute
	;;NOTE:Not handling overflow of minutes!
	inc		timeSpentWithBabyMin	
	lda		#0
.notBabyMinute
	sta		timeSpentWithBabySec
.doneBGMask
	
	
	lda		score
	cmp		#SCORE_FOR_SONG
	bpl		.yesSongVol
	lda		#0
	sta		songVol
	jmp		.doneSongVol
.yesSongVol
	lda		score
	sbc		#SCORE_FOR_SONG
	lsr
	sta		songVol
	cmp		#3
	bmi		.doneSongVol
	lda		#1
	sta		madeMusic
.doneSongVol
	
	;Score color changes at each minute
	lda		timeSpentWithBabyMin
	asl
	asl
	asl
	asl
	and		#%11110000
	ora		#$0A
	sta		scoreColor
	
	;Color in 1 bar for each 4 seconds
	lda		#%00000000
	sta		scorePF2
	sta		scorePF1
	lda		timeSpentWithBabySec
	adc		#4
	lsr
	;lsr
	lsr
	tay
	lda		scorePF2
.scoreCntLoop
	dey
	bmi		.scoreDone
	lsr
	bcc		.noPF1
	inc		scorePF1
.noPF1
	ora		#%10000000
	jmp		.scoreCntLoop
.scoreDone	
	sta		scorePF2
	
	lda		scorePF1
	tay
	lda		#0
.scoreCntLoop2
	dey
	bmi		.scoreDone2
	asl
	ora		#%00000001
	jmp		.scoreCntLoop2
.scoreDone2	
	sta		scorePF1
	
	;;seconds - 1s
	ldx #0
	lda LSBS,x  ;(4)
	sta temp5LSB  ;(3) = 50

	ldx #11	;--Blank
	lda LSBS,x  ;(4) = 61
	sta temp6LSB;(3) 

	ldx #10 ;--colon
	lda LSBS,x  ;(4)
	sta temp3LSB  ;(3) = @8

	;;-seconds - 10s
	ldx #3
	lda LSBS,x  ;(4) = 19
	sta temp4LSB;(3) = 22

	;;minutes - 10s
	ldx #4
	lda LSBS,x  ;(4)
	sta temp1LSB  ;(3) = 42

	;;minutes - 1s
	ldx #5
	lda LSBS,x  ;(4) = 53
	sta temp2LSB;(3) = 56
	
	;----This is setup for 6-character score display
	lda		#1
	sta		VDELP0
	sta		VDELP1	
	
;--Game is over if you have been with baby, then
;  lose her again
	
	;--You cannot lose until you make music
	lda		madeMusic
	beq		.notALoser
	;--If score falls too low, you lose
	lda		score
	cmp 	#SCORE_FOR_BG
	bpl		.notALoser
	jmp		Start
.notALoser
	
	
	
	
.waitForVBlank
	lda		INTIM
	bne		.waitForVBlank
	sta		WSYNC


;------------------------------------------------
; Kernel
;------------------------------------------------	
DrawScreen
	
    ; Kernel goes here.	
	;Pixel aspect ratio is 12:7
	
;--Draw the score/timer
	sta		WSYNC

	lda		#SCORE_BG		;(2)
	sta		COLUBK			;(3) = @5

	lda		#THREE_COPIES	;(2)
	sta		NUSIZ0			;(3)
	sta		NUSIZ1			;(3) = @13	

	lda     #HMOVE_M01		;(2)
	sta		HMP0			;(3) = @18
	lda		#HMOVE_M11		;(2)
	;---- Aiming for pixel 69 for RESP0, which is cycle 23
	sta 	RESP0			;(3) = @23 = pixel 69
	sta		HMP1			;(3)
	sta		RESP1			;(3) = @29 = pixel 87. Aiming for 77,
							;                      so use HMOVE
	lda		#SCORE_FG		;(2)
	sta		COLUP0			;(3) 
	sta		COLUP1			;(3) = @37

	ldy		#0				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47

	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	;---Setup for the next loop
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63

	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70
	sta 	HMOVE			;(3) = @73	

	lda		black
	sta		COLUPF

	lda		(temp5LSB),y	;(5) = @2
	sta		tmpx			;(3)
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3)

	nop
	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	nop
	nop
	nop


	ldy		#1				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		PF1


	ldy		#2				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		PF1


	ldy		#3				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		PF1


	ldy		#4				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37



	nop
	nop
	nop


	ldy		#5				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		COLUPF


	ldy		#6				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		PF1


	ldy		#7				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		PF1


	ldy		#8				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop	;@25

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	lda		black
	sta		PF1


	ldy		#9				;(2)
	lda		(temp1LSB),y	;(5)	
	sta		GRP0			;(3) = @47
	lda		(temp2LSB),y	;(5)
	sta		GRP1			;(3) = @55
	lda		(temp3LSB),y	;(5)
	sta		GRP0			;(3) = @63	
	lda		(temp4LSB),y	;(5) = @68
	tax						;(2) = @70

	lda		#0
	sta		PF1

	lda		(temp5LSB),y	;(5) = @75
	sta		tmpx			;(3) = @2
	lda		(temp6LSB),y	;(5)
	ldy		tmpx			;(3) = @10

	nop
	nop

	;---- need to wait for the beam to clear the first sprite,
	; which will be at pixel 76, clock 25
	stx		GRP1			;(3)
	sty		GRP0			;(3)
	sta		GRP1			;(3)
	stx		GRP0			;(3) @37


	;---Clear VDELP and GRP registers before going on to game kernel
	lda		#0
	sta		VDELP0
	sta		VDELP1
	sta		GRP0
	sta		GRP1
	;---Also cleanup PF1
	sta		PF1







	lda		#ONE_COPY	;(2)
	sta		NUSIZ0			;(3)
	sta		NUSIZ1			;(3) = @13
	lda		babyColor
	sta		COLUP1
	lda		#PLAYER_COLOR
	sta		COLUP0


;---Position the player and baby sprites for the rest of the game
;--Clear playfield
	lda		#0
	sta		PF2
	sta		PF1

	sta 	WSYNC
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	lda		plrX
.pos_loop_plr
	sbc		#15				;(2)
	bpl		.pos_loop_plr	;(3)
	
	sta		RESP0			;(3)

	sta		WSYNC	
	eor		#255			;(2)
	tax	
	lda		.hmove_table,x	;(4)
	sta		HMP0			;(3)
	
	sta		WSYNC
	;sta		HMOVE
	
	;Clear the player1 sprite
	lda		#0
	sta		GRP0
	;sta		HMP0
	
	
	;** Place the target sprite
	sta 	WSYNC
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	lda		tgtX
.pos_loop_tgt
	sbc		#15				;(2)
	bpl		.pos_loop_tgt	;(3)

	sta		RESP1			;(3)

	sta		WSYNC	
	eor		#255			;(2)
	tax	
	lda		.hmove_table,x	;(4)
	sta		HMP1			;(3)

	sta		WSYNC
	sta		HMOVE

	;Clear the player1 sprite
	lda		#0
	sta		GRP1
	;sta		HMP1
	sta		WSYNC
	
;---Top zone, no player/target
	ldx		#10
.scanline	
	ldy		bgIndex
	lda		.bgcolors,y
	and		bgMask
	sta		COLUBK
	
	txa
	adc		#28+45+46+45
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player
	lda		#$00
	sta		GRP0
	jmp		.donePlayer
.player
	lda		#$FF
	sta		GRP0
.donePlayer

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset
	lda		#0	
.noBgReset
	sta		bgIndex
	
	dex
	sta		WSYNC
	bne		.scanline 		
;--end top


	


;--begin first target range
	ldx		#45			
.scanline2
	ldy		bgIndex
	lda		.bgcolors,y
	and		bgMask
	sta		COLUBK

	txa
	adc		#28+46+45
	tay
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player2
	lda		#$00
	sta		GRP0
	jmp		.donePlayer2
.player2
	lda		#$FF
	sta		GRP0
.donePlayer2

	tya
	sbc		tgtY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.tgt2
	lda		#$00
	sta		GRP1
	jmp		.doneTgt2
.tgt2
	lda		#$FF
	sta		GRP1
.doneTgt2

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset2
	lda		#0	
.noBgReset2
	sta		bgIndex

	dex
	sta		WSYNC
	bne		.scanline2
;--end first target



;--begin 2nd target		
	ldx		#46		 	
.scanline3
	ldy		bgIndex
	lda		.bgcolors,y
	and		bgMask
	sta		COLUBK

	txa
	adc		#28+45
	tay		;Store to use for positioning the target
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player3
	lda		#$00
	sta		GRP0
	jmp		.donePlayer3
.player3
	lda		#$FF
	sta		GRP0
.donePlayer3

	tya
	sbc		tgtY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.tgt3
	lda		#$00
	sta		GRP1
	jmp		.doneTgt3
.tgt3
	lda		#$FF
	sta		GRP1
.doneTgt3

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset3
	lda		#0	
.noBgReset3
	sta		bgIndex
	
	dex
	sta		WSYNC
	bne		.scanline3
;--End 2nd target			
			


;--Start 3rd target			
	ldx		#45		
.scanline4
	ldy		bgIndex
	lda		.bgcolors,y
	and		bgMask
	sta		COLUBK
	
	txa
	adc		#28
	tay
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player4
	lda		#$00
	sta		GRP0
	jmp		.donePlayer4
.player4
	lda		#$FF
	sta		GRP0
.donePlayer4

	tya
	sbc		tgtY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.tgt4
	lda		#$00
	sta		GRP1
	jmp		.doneTgt4
.tgt4
	lda		#$FF
	sta		GRP1
.doneTgt4

	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset4
	lda		#0	
.noBgReset4
	sta		bgIndex

	dex
	sta		WSYNC
	bne		.scanline4					
;--end 3rd target

;--Start bottom zone	
	ldx		#28			
.scanline5
	ldy		bgIndex
	lda		.bgcolors,y
	and		bgMask
	sta		COLUBK

	txa
	adc		#0
	tay
	sbc		plrY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.player5
	lda		#$00
	sta		GRP0
	jmp		.donePlayer5
.player5
	lda		#$FF
	sta		GRP0
.donePlayer5

	tya
	sbc		tgtY
	adc		#16 ;(2) --If in range, carry will be set, A
			    ;    will give index into table
	bcs		.tgt5
	lda		#$00
	sta		GRP1
	jmp		.doneTgt5
.tgt5
	lda		#$FF
	sta		GRP1
.doneTgt5
	
	clc
	lda		bgIndex
	adc		#1
	cmp		#96
	bne		.noBgReset5
	lda		#0	
.noBgReset5
	sta		bgIndex

	dex
	sta		WSYNC
	bne		.scanline5				
;--end bottom zone			
		
;------------------------------------------------
; Overscan
;------------------------------------------------
	lda		#%01000010
	sta		VBLANK
    lda		#36
    sta		TIM64T

	;***** Overscan Code goes here
	lda #$00
	sta COLUBK
	sta COLUPF
	
.waitForOverscan
	lda     INTIM
	bne     .waitForOverscan

	jmp		MainLoop

;------------------------------------------------
; ROM Tables
;------------------------------------------------
	;***** ROM tables go here
	
	ORG $FC00 ;--Make sure these are all in the same page!	
.empty
	.byte	%00000000
	.byte	%00000000
	.byte   %00000000
	.byte	%00000000
	.byte	%00000000
	.byte	%00000000
	.byte	%00000000
	.byte   %00000000
	.byte	%00000000
	.byte	%00000000
.colon
	.byte	%00000000
	.byte	%00000000
	.byte   %00011100
	.byte	%00011100
	.byte	%00000000
	.byte	%00000000
	.byte	%00011100
	.byte   %00011100
	.byte	%00000000
	.byte	%00000000
.one
	.byte	%00000110
	.byte	%00000110
	.byte   %00000010
	.byte	%00000011
	.byte	%00000011
	.byte	%00000011
	.byte	%00000011
	.byte   %00000011
	.byte	%00000011
	.byte	%00000011

.two
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%00000011
	.byte	%01111111
	.byte	%01111111
	.byte	%01100000
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111

.three
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%00000011
	.byte	%00011111
	.byte	%00011111
	.byte	%00000011
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111

.four
	.byte	%01100010
	.byte	%01100010
	.byte   %01100010
	.byte	%01100011
	.byte	%01111111
	.byte	%01111111
	.byte	%00000011
	.byte   %00000011
	.byte	%00000011
	.byte	%00000011

.five
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%01100000
	.byte	%01111111
	.byte	%01111111
	.byte	%00000011
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111

.six
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%01100000
	.byte	%01111111
	.byte	%01111111
	.byte	%01100011
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111

.seven
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%00000011
	.byte	%00000011
	.byte	%00000011
	.byte	%00000011
	.byte   %00000011
	.byte	%00000011
	.byte	%00000011

.eight
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%01100011
	.byte	%01111111
	.byte	%01111111
	.byte	%01100011
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111

.nine
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%01100011
	.byte	%01111111
	.byte	%01111111
	.byte	%00000011
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111

	.byte	%00000000
	.byte	%00000000
.zero
	.byte	%01111110
	.byte	%01111110
	.byte   %01100010
	.byte	%01110011
	.byte	%01111011
	.byte	%01101111
	.byte	%01100111
	.byte   %00100011
	.byte	%00111111
	.byte	%00111111
	.byte	%00000000
	.byte	%00000000

LSBS
	.byte	.zero & $FF
	.byte	.one & $FF
	.byte	.two & $FF
	.byte	.three & $FF
	.byte	.four & $FF
	.byte	.five & $FF
	.byte	.six & $FF
	.byte	.seven & $FF
	.byte	.eight & $FF
	.byte	.nine & $FF
	.byte   .colon & $FF
	.byte	.empty & $FF
	
	ORG $FD00
Logo0
	   .byte %10001010
	   .byte %10001010
	   .byte %10101011
	   .byte %11011010
	   .byte %10001011 ;May 2013
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00001110 ;Studio
	   .byte %00000010
	   .byte %00001110
	   .byte %00001000
	   .byte %00001110
	   .byte %00000000
	   .byte %10001101 ;Platform
	   .byte %10001001
	   .byte %11101001
	   .byte %10101001
	   .byte %11101001
	   .byte %00000000
	   .byte %00000010 ;Atari
	   .byte %00000010
	   .byte %00000011
	   .byte %00000010
	   .byte %00000011
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %01110111 ;CSE 270B
	   .byte %01000001
	   .byte %01000111
	   .byte %01000100
	   .byte %01110111
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000 ;Beveled M
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000 ;End beveled M
	   .byte %00000000
	   .byte %00000000
	   .byte %00000000
	   .byte %01000101 ;Miami OH
	   .byte %01000101
	   .byte %01010101
	   .byte %01101101
	   .byte %01000101

Logo1
	.byte %10010001
	.byte %10010001
	.byte %10101001
	.byte %10101000
	.byte %10101001 ;May 2013
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01001110 ;Studio
	.byte %01001010
	.byte %01001010
	.byte %01001010
	.byte %11101010
	.byte %00000000
	.byte %01001001 ;Platform
	.byte %01001001
	.byte %11001001
	.byte %01001001
	.byte %11011101
	.byte %00000000
	.byte %10010010 ;Atari
	.byte %10010010
	.byte %10010011
	.byte %10010010
	.byte %10111011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01110011 ;CSE 270B
	.byte %01000010
	.byte %01100011
	.byte %01000000
	.byte %01110011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01111000 ;Beveled M
	.byte %00110000
	.byte %00010000
	.byte %00010010
	.byte %00010010
	.byte %00010111
	.byte %00010101
	.byte %00011101
	.byte %00011000
	.byte %00111000
	.byte %01110000 ;End beveled M
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01010100 ;Miami OH
	.byte %01010100
	.byte %01110101
	.byte %01010110
	.byte %01110100

Logo2
	.byte %11011101
	.byte %00010100
	.byte %11010100
	.byte %01010101
	.byte %11011100 ;May 2013
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11001110 ;Studio
	.byte %10100100
	.byte %10100100
	.byte %10100100
	.byte %11001110
	.byte %00000000
	.byte %00011101 ;Platform
	.byte %00010101
	.byte %10010101
	.byte %00010101
	.byte %11011101
	.byte %00000000
	.byte %10101011 ;Atari
	.byte %10101001
	.byte %10110001
	.byte %10101001
	.byte %10111011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10001011 ;CSE 270B
	.byte %00001010
	.byte %10001010
	.byte %10001010
	.byte %10111011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11110000 ;Beveled M
	.byte %01100000
	.byte %01000000
	.byte %01000000
	.byte %01000000
	.byte %01000000
	.byte %01000000
	.byte %11000000
	.byte %11000000
	.byte %11100000
	.byte %01110000 ;End beveled M
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01010001 ;Miami OH
	.byte %01010001
	.byte %01010001
	.byte %11010001
	.byte %01010001

Logo3
	.byte %11011101
	.byte %10000100
	.byte %10001101
	.byte %10000101
	.byte %10011101 ;May 2013
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11100000 ;Studio
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %11100000
	.byte %00000000
	.byte %01010001 ;Platform
	.byte %01010001
	.byte %10010101
	.byte %01011011
	.byte %11010001
	.byte %00000000
	.byte %10000000 ;Atari
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10111000 ;CSE 270B
	.byte %10101000
	.byte %10110000
	.byte %10101000
	.byte %10111000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000 ;Beveled M
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000 ;End beveled M
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11010100 ;Miami OH
	.byte %01010100
	.byte %01011100
	.byte %01010100
	.byte %11010100
		
	ORG $FE00
.hmove_table
	.byte HMOVE_0 
	.byte HMOVE_M01         
	.byte HMOVE_M02        
	.byte HMOVE_M03       
	.byte HMOVE_M04         
	.byte HMOVE_M05          
	.byte HMOVE_M06          
	.byte HMOVE_M07         
	.byte HMOVE_M08       
	.byte HMOVE_M09         
	.byte HMOVE_M10          
	.byte HMOVE_M11          
	.byte HMOVE_M12          
	.byte HMOVE_M13          
	.byte HMOVE_M14          
	.byte HMOVE_M15
	
.song
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2
	.byte NOTE_A2
	
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_G
	.byte NOTE_G
	
	.byte NOTE_C2 | NOTE_ATTACK
	.byte NOTE_C2
	.byte NOTE_C2
	.byte NOTE_BF2 | NOTE_ATTACK
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_E | NOTE_ATTACK
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_A2
	.byte NOTE_A2
	.byte NOTE_A2
	
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_G
	.byte NOTE_G
	.byte NOTE_G
	
	.byte NOTE_C2 | NOTE_ATTACK
	.byte NOTE_C2
	.byte NOTE_C2
	.byte NOTE_BF2 | NOTE_ATTACK
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_E | NOTE_ATTACK
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	
	.byte NOTE_A | NOTE_ATTACK
	.byte NOTE_A
	.byte NOTE_C | NOTE_ATTACK
	.byte NOTE_C
	.byte NOTE_C | NOTE_ATTACK
	.byte NOTE_C
	.byte NOTE_C
	.byte NOTE_C
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_F
	.byte NOTE_F
	.byte NOTE_F
	
	.byte NOTE_C2 | NOTE_ATTACK
	.byte NOTE_C2
	.byte NOTE_C2
	.byte NOTE_BF2 | NOTE_ATTACK
	.byte NOTE_A2 | NOTE_ATTACK
	.byte NOTE_G | NOTE_ATTACK
	.byte NOTE_F | NOTE_ATTACK
	.byte NOTE_E | NOTE_ATTACK
	
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D | NOTE_ATTACK
	.byte NOTE_D
	.byte NOTE_D
	.byte NOTE_D
	;--Song end
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E
	.byte NOTE_E

	;ORG $FE00
.bgcolors
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46

	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$4e
	.byte #$4e
	.byte #$4e
	.byte #$4e
	
	.byte #$4c
	.byte #$4c
	.byte #$4c
	.byte #$4c
	
	.byte #$4a
	.byte #$4a
	.byte #$4a
	.byte #$4a
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$48
	.byte #$48
	.byte #$48
	.byte #$48
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$46
	.byte #$46
	.byte #$46
	.byte #$46
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
		
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44
	
	.byte #$44
	.byte #$44
	.byte #$44
	.byte #$44

	
;------------------------------------------------
; Interrupt Vectors
;------------------------------------------------
	echo [*-$F000]d, " ROM bytes used"
	ORG    $FFFA
	.word  Start         ; NMI
	.word  Start         ; RESET
	.word  Start         ; IRQ
    
	END